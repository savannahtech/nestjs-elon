name: Billboards backend CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [ "opened", "reopened", "edited", "labeled", "unlabeled", "ready_for_review" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        no-cache: true
        tags: elonaire/billboards-backend:latest
        build-args: |
          DB_HOST=${{ secrets.DB_HOST }}

    - name: SCP files to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "nginx/,docker-compose.yml"
        target: ~/

    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        # key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          CI=true docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          CI=true docker-compose down
          CI=true docker-compose build --no-cache
          CI=true docker image prune -a -f
          CI=true docker-compose up -d --force-recreate

  automerge:
    runs-on: ubuntu-latest

    needs: [build_and_deploy]

    steps:
      - id: automerge
        name: automerge
        uses: "pascalgn/automerge-action@v0.15.5"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""
